{"version":3,"sources":["components/Tile.js","components/CardList.js","Deck.js","components/Score.js","App.js","index.js"],"names":["Tile","handleClick","id","type","flipped","height","width","disabled","solved","className","style","onClick","src","alt","CardList","landscape","dimension","tiles","map","tile","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","Score","score","Greeting","props","won","App","useState","setTiles","setFlipped","setDimension","setSolved","setDisabled","flipcount","setFlipcount","setLandscape","setWon","resizeBoard","sc_ht","document","documentElement","clientHeight","sc_wd","clientWidth","useEffect","preloadImages","Image","console","log","resizeListener","window","addEventListener","resetTiles","isMatch","clickedTile","find","sameCardClicked","setTimeout","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ac4a7a93.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Tile.css';\r\nexport default function Tile({handleClick, id, type, flipped, height, width, disabled, solved}){\r\n\treturn <div \r\n\t\tclassName={`flip-container ${flipped ? 'flipped' : ''}`} \r\n\t\tstyle={{\r\n\t\t\twidth, height\r\n\t\t}}\r\n\t\tonClick={()=> disabled ? null : handleClick(id)}\r\n\t\t>\r\n\t\t\t<div className={`flipper ${flipped||solved ? '' : 'flippable'}`} >\r\n\t\t\t\t\t<img \r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\theight, width\r\n\t\t\t\t\t\t}} \r\n\t\t\t\t\tclassName={flipped || solved? (solved ? 'solved': 'front') : 'back'}\r\n\t\t\t\t\tsrc={flipped || solved ? `./img/${type}.png` : './img/erwin.png'}\r\n\t\t\t\t\talt={`img = ${type}`}\r\n\t\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n}\r\nTile.propTypes = {\r\n\thandleClick: PropTypes.func.isRequired,\r\n\tid: PropTypes.number.isRequired,\r\n\tflipped: PropTypes.bool.isRequired,\r\n\tsolved: PropTypes.bool.isRequired,\r\n\ttype: PropTypes.string.isRequired,\r\n\theight: PropTypes.string.isRequired,\r\n\twidth: PropTypes.number.isRequired,\r\n\tdisabled: PropTypes.bool.isRequired,\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tile from './Tile';\r\nimport './CardList.css';\r\n\r\nexport default function CardList({\r\n    landscape, solved, disabled, dimension, tiles, flipped, handleClick}) {\r\n        return (\r\n        <div className={`cardlist ${landscape ? '':'landscape'}` }>\r\n            {tiles.map((tile) => (\r\n                <Tile \r\n                    key={tile.id}\r\n                    id={tile.id}\r\n                    type={tile.type}\r\n                    width={dimension / 5}\r\n                    height={dimension / 5}\r\n                    flipped={flipped.includes(tile.id)}\r\n                    handleClick={()=> handleClick(tile.id)}\r\n                    disabled = {disabled || solved.includes(tile.id)}\r\n                    solved = {solved.includes(tile.id)}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nCardList.propTypes = {\r\n    landscape: PropTypes.bool.isRequired,\r\n    disabled: PropTypes.bool.isRequired,\r\n    dimension: PropTypes.number.isRequired,\r\n    tiles: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n}","function shuffle(array) {\r\n    const _array = array.slice(0)\r\n    for(let i=0;i<array.length -1;i++)\r\n    {\r\n        let randomIndex = Math.floor(Math.random()*(i+1))\r\n        let temp =_array[i]\r\n        _array[i] = _array[randomIndex]\r\n        _array[randomIndex] =temp\r\n    }\r\n    return _array\r\n}\r\nexport default function initializeDeck() {\r\n    let id=0\r\n    const tiles = ['shasha', 'hanji', 'eren', 'historia', 'mikasa', 'armin', 'levi', 'annie'\r\n    ].reduce((acc, type) => {\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        acc.push({\r\n            id: id++,\r\n            type\r\n        })\r\n        return acc\r\n    }, [])\r\n    return shuffle(tiles)\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Score.css';\r\nexport default function Score({score}){\r\n\treturn (<div className='score'>\r\n\t\t\t<h2>Score:  {score}</h2>\r\n\t\t</div>)\r\n}\r\nScore.propTypes = {\r\n\tscore : PropTypes.number.isRequired,\r\n}","import React, {useEffect, useState} from 'react';\nimport CardList from './components/CardList';\nimport initializeDeck from './Deck';\nimport Score from './components/Score';\nimport './App.css';\nfunction Greeting(props){\n\tif(props.won)\n\t{\n\t\treturn <h1><strong>Shinzou wo Sasageyo!</strong><br/>Hit refresh to play again</h1>\n\t}\n\telse\n\t{\n\t\treturn <></>\n\t}\n}\nexport default function App() {\n\n\tconst [tiles, setTiles] = useState([])\n\tconst [flipped, setFlipped] = useState([])\n\tconst [dimension, setDimension] = useState(400)\n\tconst [solved, setSolved] = useState([])\n\tconst [disabled, setDisabled] = useState(false)\n\tconst [flipcount, setFlipcount] = useState(0)\n\tconst [landscape, setLandscape] = useState(true)\n\tconst [won, setWon] = useState(false)\n\n\tconst resizeBoard = () => {\n\t\tconst sc_ht = document.documentElement.clientHeight\n\t\tconst sc_wd = document.documentElement.clientWidth \n\t\tsetLandscape(\n\t\t\tsc_wd\t>\tsc_ht\n\t\t)\n\t\tsetDimension(\n\t\t\tlandscape ? sc_wd/2 : sc_wd\n\t\t)\n\t}\n\tuseEffect(()=> {\n\t\tresizeBoard()\n\t\tsetTiles(initializeDeck())\n\t}, tiles)\n\n\tuseEffect(() => {\n\t\tpreloadImages()\n\t}, [])\n\t\n\tconst preloadImages = () => {\n\t\ttiles.map(tile => {\n\t\t\tconst src = `./img/${tile.type}.png`\n\t\t\tnew Image().src = src\n\t\t})\n\t}\n\tuseEffect(() =>{\n\t\tconsole.log('Hello')\n\t\tsetWon(solved.length===16? true:false)\n\t})\n\tuseEffect(()=> {\n\t\tconst resizeListener = window.addEventListener('resize', resizeBoard)\n\t\treturn () => window.addEventListener('resize', resizeListener)\n\t})\n\t\n\tconst handleClick = (id) => {\n\t\tsetDisabled(true)\n\t\tif(flipped.length === 0){\n\t\t\tsetFlipped([id])\n\t\t\tsetDisabled(false)\n\t\t\treturn\n\t\t}else {\n\t\t\tif(sameCardClicked(id))\n\t\t\t{\n\t\t\t\tsetDisabled(false)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsetFlipped([flipped[0], id])\n\t\t\tif (isMatch(id)) {\n\t\t\t\tsetSolved([...solved, flipped[0], id])\n\t\t\t\tresetTiles()\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetFlipcount(flipcount+1)\n\t\t\t\tsetTimeout(resetTiles, 1000)\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tconst resetTiles = () => {\n\t\tsetFlipped([])\n\t\tsetDisabled(false)\n\n\t}\n\tconst isMatch = (id) => {\n\t\tconst clickedTile = tiles.find((tile)=>tile.id === id)\n\t\tconst flippedTile = tiles.find((tile)=>flipped[0] === tile.id)\n\t\treturn flippedTile.type === clickedTile.type\n\t}\n\tconst sameCardClicked = (id) => flipped.includes(id)\n  \treturn (\n\t<>\t  \n  \t<div className='body'>\n\t\t<Score\n\t\t\tclassName = 'scorebutton'\n\t\t\tscore = {solved.length/2 * 100 - flipcount}\n\t\t/>\n    \t<CardList\n\t\t\tclassName = 'container'\n\t\t\tlandscape = {landscape}\n\t\t\tdimension = {dimension}\n\t\t\ttiles={tiles}\n\t\t\tflipped={flipped}\n\t\t\thandleClick={handleClick}\n\t\t\tdisabled={disabled}\n\t\t\tsolved={solved}\n    \t/>\n\t\t<Greeting id='congo' won={won}/>\n\t</div>\n\t</>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}